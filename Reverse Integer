/*
Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

Example 1:

Input: x = 123
Output: 321
Example 2:

Input: x = -123
Output: -321
Example 3:

Input: x = 120
Output: 21
 
Constraints:

-231 <= x <= 231 - 1
*/
class Solution {
private:
    static constexpr int ONES_MAX = INT_MAX % 10;
    static constexpr int ALL_BUT_ONES_MAX = INT_MAX / 10;
    int check_out_of_boundries(int res, int new_ones_digit, bool flag){
        if (new_ones_digit > 0){
            if (res > ALL_BUT_ONES_MAX){
                return 1;
            }
            else if (flag && res == ALL_BUT_ONES_MAX && new_ones_digit > ONES_MAX){
                return 1;
            }
            else if (!flag && res == ALL_BUT_ONES_MAX && new_ones_digit > ONES_MAX + 1){
                return 1;
            }
        }
        return 0;
    }
public:
    int reverse(int x) {
        bool flag = true;
        if (x < 0){
            if (x == INT_MIN){
                return 0;
            }
            flag = false;
            x = -1 * x;
        }
        int res = 0;
        while(x > 0){
            int new_ones_digit = x % 10;
            if (check_out_of_boundries(res, new_ones_digit, flag) == 1){
                return 0;
            }
            res = res * 10 + (new_ones_digit);
            x = x / 10;
        }
        if (!flag){
            res = -1 * res;
        }
        return res;
    }
};
