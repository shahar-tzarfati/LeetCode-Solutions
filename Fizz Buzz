Given an integer n, return a string array answer (1-indexed) where:

answer[i] == "FizzBuzz" if i is divisible by 3 and 5.
answer[i] == "Fizz" if i is divisible by 3.
answer[i] == "Buzz" if i is divisible by 5.
answer[i] == i (as a string) if none of the above conditions are true.

Example 1:

Input: n = 3
Output: ["1","2","Fizz"]
/* Example 2:

Input: n = 5
Output: ["1","2","Fizz","4","Buzz"]
Example 3:

Input: n = 15
Output: ["1","2","Fizz","4","Buzz","Fizz","7","8","Fizz","Buzz","11","Fizz","13","14","FizzBuzz"]
 
Constraints:

1 <= n <= 104
*/
/**
 * The function receives an int n and returns the amount of digits in it.
 */
int count_digits_positive(int n) {
    int count = 0;
    while (n > 0) {
        n = n / 10;
        count++;
    }
    return count;
}

/**
 * The function receives a char** arr and an int in and frees the first i cells.
 */
void free_arr(char** arr, int i){
    for (int j = 0; j < i; j++){
        free(arr[j]);
    }
    free(arr);
}
/**
 * The function receives a char** arr, an int i and an int len.
 * The function tries to realloc the char arr[i] points at to the size len.
 * In case of success, it returns 0, otherwise it frees arr and returns 1.
 */

int adjust_chars_arr(char** arr, int i, int len){
    char* temp = arr[i];
    arr[i] = (char*)realloc(arr[i], sizeof(char) * len);
    if (arr[i] == NULL){
        free(temp);
        free_arr(arr, i);
        return 1;
    }
    return 0;
}

/**
 * The function receives the ints num, len and i and char** arr when len is num's amount of digits.
 * The function writes num in *arr[i];
 */
void make_str_from_num(int num, int len, int i, char** arr){
    for (int j = len - 2; j >=0; j--){
                arr[i][j] = '0' + (num % 10);
                num = num / 10;
            }
            arr[i][len - 1] = 0;
}

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
char** fizzBuzz(int n, int* returnSize) {
    char** arr_to_rtn = (char**)malloc(sizeof(void*) * n);
    if (arr_to_rtn == NULL){
        return NULL;
    }
    char fizz[] = "Fizz";
    char buzz[] = "Buzz";
    for (int i = 0; i < n; i++){
        arr_to_rtn[i] = (char*)calloc(sizeof(char), 1);
        int len = 1;
        if ((i + 1) % 3 == 0){
            len = strlen(fizz) + len;
            if (adjust_chars_arr(arr_to_rtn, i, len) == 1){
                return NULL;
            }
            memcpy(arr_to_rtn[i], fizz, len);
        }
        if ((i + 1) % 5 == 0){
            int added_len = strlen(buzz);
            if (adjust_chars_arr(arr_to_rtn, i, len + added_len) == 1){
                return NULL;
            }
            memcpy(arr_to_rtn[i] + len - 1, buzz, added_len + 1);
            len = len + added_len;
        }
        if (len == 1){
            len = count_digits_positive(i + 1);
            if (adjust_chars_arr(arr_to_rtn, i, ++len) == 1){
                return NULL;
            }
            int num = i + 1;
            make_str_from_num(num, len, i, arr_to_rtn);
        }
    }
    *returnSize = n;
    return arr_to_rtn;
}

